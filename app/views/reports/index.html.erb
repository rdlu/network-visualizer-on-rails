<div id="header">
    <h2>Relatórios</h2>

    <input type="image" name="open" id="optbtn" src='<%= image_path 'opt_btn-left.png' %>' data-toggle="collapse" href="#accordion_forms">
</div>
    <div style="margin-left:40px;position: absolute;z-index: 100;">

      <div id="accordion_forms" class="collapse width in">
          <div id="tabs">
            <div class="tabbable" >
              <ul class="nav nav-tabs ">
                <li class="active"><a href="#form_1" data-toggle="tab">Formato 1</a></li>
                <li><a href="#form_2" data-toggle="tab">Formato 2</a></li>
                <li><a href="#form_3" data-toggle="tab">Performance</a></li>
                <li><a href="#form_4" data-toggle="tab">SmartRate</a></li>
              </ul>
              <div class="tab-content tab-content-border" style="min-height: 50px !important">
                <div class="tab-pane active" id="form_1">
                  <%= render 'form1' %>
                </div>
                <div class="tab-pane"  id="form_2"> <%= render 'form2' %> </div>
                <div class="tab-pane"  id="form_3"> <%= render 'form3' %></div>
                <div class="tab-pane"  id="form_4">  <%= render 'form4' %></div>
              </div>
            </div>
          </div>
      </div>
    </div>


<div id="view">
  <div id="graphs-area">
  </div>
</div>


<script type="text/javascript">
    var graphs = {};
    var params = {};
    $(function () {
        $('#optbtn').click(function () {
            var text = document.getElementById('optbtn').getAttribute('name');
            if (text == 'open') {
                $("#optbtn").attr('src', '<%= image_path 'opt_btn-right.png' %>');
                $("#optbtn").attr('name', 'closed');
            } else {
                $("#optbtn").attr('src', '<%= image_path 'opt_btn-left.png' %>');
                $("#optbtn").attr('name', 'open');
            }
        });

        Highcharts.setOptions({
            // This is for all plots, change Date axis to local timezone
            global: {
                useUTC: false
            }
        });

        jQuery('#date_start')
                .datepicker()
                .on('changeDate', this, function (ev) {
                    jQuery(this).datepicker('hide');
                    jQuery('#time_start').focus();
                })
                .iMask({
                    type: 'fixed',
                    mask: '99/99/9999'
                });

        jQuery('#date_end')
                .datepicker()
                .on('changeDate', this, function (ev) {
                    jQuery(this).datepicker('hide');
                    jQuery('#time_end').focus();
                })
                .iMask({
                    type: 'fixed',
                    mask: '99/99/9999'
                });

        jQuery('#time_start')
            //.timepicker({showMeridian: false,disableFocus:true})
                .iMask({type: 'fixed', mask: '99:99'});

        jQuery('#time_end')
            //.timepicker({showMeridian: false,disableFocus:true})
                .iMask({type: 'fixed', mask: '99:99'});

        jQuery("#destination_id").change(function (evt) {
            var destination_id = evt.currentTarget.value;
            if (destination_id != '')
                jQuery.ajax("<%=probes_url %>/" + destination_id + "/sources", {
                    success: function (result, status) {
                        var options = jQuery('#source_id');
                        options.html('');
                        options.removeAttr('disabled');
                        jQuery.each(result, function (index, item) {
                            options.append($("<option />").val(item.id).text(item.name + ' (' + item.ipaddress + ') - ' + item.city + '/' + item.state.toUpperCase()));
                            jQuery("#source_id").trigger('change');
                        });
                        if (result.length == 0) {
                            options.append($("<option />").val('').text('Essa sonda não recebe testes')).prop('disabled', true);
                            jQuery('#metric_id').html('').append($("<option />").val('').text('Selecione as sonda de origem e de destino primeiro')).prop('disabled', true);
                        }
                    },
                    dataType: 'json',
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                });
            else {
                jQuery('#source_id').html('').append($("<option />").val('').text('Selecione a sonda de destino primeiro')).prop('disabled', true).trigger('change');
                jQuery('#metric_id').html('').append($("<option />").val('').text('Selecione o tipo de relatório primeiro')).prop('disabled', true);
                jQuery("#metric_id").trigger('change');
            }
        });

        jQuery("#source_id").change(function (evt) {
            var destination_id = evt.currentTarget.value;
            var source_id = evt.currentTarget.value;
            if (source_id != '') {
                jQuery('#report_type').prop('disabled', false).val('eaq_graph');
            } else {
                jQuery('#report_type').prop('disabled', true).val('');
            }

            jQuery("#report_type").trigger('change');
        });

        jQuery("#report_type").change(function (evt) {
            var report_type = evt.currentTarget.value;
            var source_id = jQuery('#source_id').val();
            var destination_id = jQuery('#destination_id').val();
            var action = 'INVALIDA';
            switch (report_type) {
                case 'graph':
                    action = 'metrics';
                    break;
                case 'eaq_graph':
                    action = 'thresholds';
                    break;
                case 'eaq_compliance_graph':
                    action = 'thresholds';
                    break;
                case 'eaq_table':
                    action = '';
                    break;
            }
            if (report_type != '' && action != '')
                jQuery.ajax("<%=probes_url %>/" + destination_id + "/" + action + "/" + source_id, {
                    success: function (result, status) {
                        var options = jQuery('#metric_id');
                        options.html('');
                        options.removeAttr('disabled');
                        jQuery.each(result, function (index, item) {
                            options.append($("<option />").val(item.id).text(item.name + ' (' + item.description + ')'));
                            jQuery("#metric_id").trigger('change');
                        });
                        if (result.length == 0) {
                            options.append($("<option />").val('').text('Essas sondas não possuem testes programados')).prop('disabled', true);
                        }
                    },
                    error: function (result, status) {
                        jQuery('#metric_id').html('').append($("<option />").val('tb_invalid').text('Tipo inválido')).prop('disabled', true);
                        jQuery("#metric_id").trigger('change');
                    },
                    dataType: 'json',
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                });
            else if (action == '') {
                jQuery('#metric_id').html('').append($("<option />").val('tb_invalid').text('Tabela Anatel')).prop('disabled', false);
                jQuery("#metric_id").trigger('change');
            }
            else {
                jQuery('#metric_id').html('').append($("<option />").val('').text('Selecione o tipo de relatório primeiro')).prop('disabled', true);
                jQuery("#metric_id").trigger('change');
            }
        });

        jQuery("#metric_id").change(function (event) {
            var metric_id = event.currentTarget.value;
            if (metric_id != '' || metric_id == 'tb_invalid') {
                jQuery('#report-add').prop('disabled', false);
            } else {
                jQuery('#report-add').prop('disabled', true);
            }
        });

        jQuery('#report-add').prop('disabled', true);

        jQuery('#report-form').submit(function (event) {
            event.preventDefault();
            var destination_id = jQuery('#destination_id').val();
            var source_id = jQuery('#source_id').val();
            var metric_id = jQuery('#metric_id').val();
            var report_type = jQuery('#report_type').val();
            var date_start = new Date(jQuery('#date_start').val().split('/').reverse());
            var date_end = new Date(jQuery('#date_end').val().split('/').reverse());
            var day_in_milisecs = 1000 * 60 * 60 * 24;
            var date_diff = (date_end - date_start) / day_in_milisecs;


            if (report_type == 'graph')
                report_type = "dygraphs_bruto";

            if (source_id != '' && destination_id != '' && metric_id != '')
                jQuery.ajax("<%= reports_url %>/" + report_type, {
                    beforeSend: function () {
                        jQuery('#graphs-area').prepend('<div id=\"row-loading\" class="row-fluid"><div   class=\"span12\"><div id=\"box-loading\" style="height:100px;"><%=image_tag 'ajax-loader.gif' %> <strong>Requisitando o relatório selecionado, aguarde...</strong></div></div></div>');
                    },
                    complete: function (obj, status) {
                        jQuery('#row-loading').remove();
                    },
                    error: function (obj, status) {
                        console.log(obj);
                        console.log("Query Error " + status);
                    },
                    success: function (result, status) {
                        switch (report_type) {
                            case 'dygraphs_bruto':
                                if (!jQuery("#box-dygraph-" + source_id+'-'+destination_id+'-'+metric_id).is(':empty')) {
                                    jQuery("#box-dygraph-" + source_id + '-' + destination_id+'-'+metric_id).remove();
                                }

                                jQuery('#graphs-area').prepend(result);
                                break;
                            case 'highcharts_bruto':
                                if (!jQuery("#box-highcharts-" + source_id+'-'+destination_id+'-'+metric_id).is(':empty')) {
                                    jQuery("#box-highcharts-" + source_id + '-' + destination_id+'-'+metric_id).remove();
                                }

                                jQuery('#graphs-area').prepend(result);
                                break;
                            case 'graph':
                                var graph = new Graph(result.source, result.destination, result.metric, result.range, result.results);
                                graphs[graph.idName] = graph;
                                graph.draw();
                                break;
                            case 'eaq_graph':
                                var eaqgraph = new EAQGraph(result.source, result.destination, result.threshold, result.metric, result.range, result.results, result.goal_line);
                                graphs[eaqgraph.idName] = eaqgraph;
                                eaqgraph.draw();
                                break;
                            case 'eaq_compliance_graph':
                                var eaqcompliancegraph = new EAQComplianceGraph(result.source, result.destination, result.threshold, result.metric, result.range, result.results);
                                graphs[eaqcompliancegraph.idName] = eaqgraph;
                                eaqcompliancegraph.draw();
                                break;
                            case 'eaq_table':
                                if (jQuery("box-" + source_id).is(':empty')) {
                                    jQuery('#graphs-area').prepend(result);
                                } else {
                                    $("#box-" + source_id).remove();
                                    jQuery('#graphs-area').prepend(result);
                                }
                                break;
                        }


                    },
                    //dataType: 'json',
                    data: $(this).serialize(),
                    method: 'post',
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                });
            else {
                jQuery('#report-add').prop('disabled', true);
            }
        });

        jQuery('#report-form4').submit(function (event) {
            event.preventDefault();

            jQuery.ajax("<%= pacman_reports_url %>/", {
                    beforeSend: function () {
                        jQuery('#graphs-area').prepend('<div id=\"row-loading\" class="row-fluid"><div   class=\"span12\"><div id=\"box-loading\" style="height:100px;"><%=image_tag 'ajax-loader.gif' %> <strong>Requisitando o relatório selecionado, aguarde...</strong></div></div></div>');
                    },
                    complete: function (obj, status) {
                        jQuery('#row-loading').remove();
                    },
                    error: function (obj, status) {
                        console.log(obj);
                        console.log("Query Error " + status);
                    },
                    success: function (result, status) {
                    if (!jQuery("#box-pacman").is(':empty')) {
                        jQuery("#box-pacman").remove();
                    }

                    jQuery('#graphs-area').prepend(result);

                    },
                    //dataType: 'json',
                    data: $(this).serialize(),
                    method: 'post',
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                });
        });
        jQuery('#report-form5').submit(function (event) {
            event.preventDefault();

            jQuery.ajax("<%= pacman_activity_reports_path %>/", {
                beforeSend: function () {
                    jQuery('#graphs-area').prepend('<div id=\"row-loading\" class="row-fluid"><div   class=\"span12\"><div id=\"box-loading\" style="height:100px;"><%=image_tag 'ajax-loader.gif' %> <strong>Requisitando o relatório selecionado, aguarde...</strong></div></div></div>');
                },
                complete: function (obj, status) {
                    jQuery('#row-loading').remove();
                },
                error: function (obj, status) {
                    console.log(obj);
                    console.log("Query Error " + status);
                },
                success: function (result, status) {
                    if (!jQuery("#pacman_activity").is(':empty')) {
                        jQuery("#pacman_activity").remove();
                    }

                    jQuery('#graphs-area').prepend(result);

                },
                //dataType: 'json',
                data: $(this).serialize(),
                method: 'post',
                headers: {
                    'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });
        });
        jQuery('#report-form6').submit(function (event) {
            event.preventDefault();

            jQuery.ajax("<%= pacman_service_activity_reports_path %>/", {
                beforeSend: function () {
                    jQuery('#graphs-area').prepend('<div id=\"row-loading\" class="row-fluid"><div   class=\"span12\"><div id=\"box-loading\" style="height:100px;"><%=image_tag 'ajax-loader.gif' %> <strong>Requisitando o relatório selecionado, aguarde...</strong></div></div></div>');
                },
                complete: function (obj, status) {
                    jQuery('#row-loading').remove();
                },
                error: function (obj, status) {
                    console.log(obj);
                    console.log("Query Error " + status);
                },
                success: function (result, status) {
                    if (!jQuery("#pacman_service_activity").is(':empty')) {
                        jQuery("#pacman_service_activity").remove();
                    }

                    jQuery('#graphs-area').prepend(result);

                },
                //dataType: 'json',
                data: $(this).serialize(),
                method: 'post',
                headers: {
                    'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });
        });

        jQuery('#report-form2').submit(function (event) {
            event.preventDefault();
            var from = jQuery('#date_start2').val();
            var to = jQuery('#date_end2').val();
            if (from != '')
                from = moment(jQuery('#date_start2').val(), "DD\MM\YYYY HH:mm Z").utc().format();
            else from = '';
            if (to != '')
                to = moment(jQuery('#date_end2').val(), "DD\MM\YYYY HH:mm Z").utc().format();
            else to = '';

            var agent = jQuery('#agent').val();
            var cn = jQuery('#probe-cn').val();
            var pop = jQuery('#pop').val();
            var bras = jQuery('#bras').val();
            //var goal_filter = jQuery('#goal_filter').val();
            var states = jQuery('#probe-state').val();

            if (cn == null) {
                var aux = document.getElementById('probe-cn').options;
                aux.selected = false;
                for (var i = 0; i < aux.length; i++) {
                    aux.item(i).selected = true;
                }
                cn = jQuery('probe-cn').val();
            }
            if (states == null) {
                var aux = document.getElementById('probe-state').options;
                aux.selected = false;
                for (var i = 0; i < aux.length; i++) {
                    aux.item(i).selected = true;
                }
                states = jQuery('#probe-state').val();

            }
            if (pop == null){
                var aux =  document.getElementById('pop').options;
                aux.selected = false;
                for (var i =0; i < aux.length; i++){
                    aux.item(i).selected = true;
                }
                pop = jQuery('pop').val();
            }
            if (bras == null){
                var aux =  document.getElementById('bras').options;
                aux.selected = false;
                for (var i =0; i < aux.length; i++){
                    aux.item(i).selected = true;
                }
                bras = jQuery('bras').val();

            }

            if (from != '' && to != '') {
                jQuery.ajax("<%= eaq2_table_reports_url %>/", {
                    data: $(this).serialize(),
                    method: 'post',
                    beforeSend: function () {
                        jQuery('#graphs-area').prepend('<div id=\"row-loading\" class="row-fluid"><div class=\"span12\"><div id=\"box-loading\" style="height:100px;"><%=image_tag 'ajax-loader.gif' %> <strong>Requisitando o relatório selecionado, aguarde...</strong></div></div></div>');
                    },
                    complete: function () {
                        jQuery('#row-loading').remove();
                    },
                    success: function (result, status) {
                        if (jQuery("box-" + from).is(':empty')) {
                            jQuery('#graphs-area').prepend(result);
                        } else {
                            $("#box-" + from).remove();
                            jQuery('#graphs-area').prepend(result);
                        }
                    },
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                });
            } else {
               //$('#accordion_forms').toggleClass();
                $('#error_Ini2').html('Você deve escolher uma data.');
                $('#error_Ini2').attr('style','display:block');
                jQuery('#report2-add').prop('disabled', true);
            }
        });

        function EAQGraph(source, destination, threshold, metric, range, results, goal_lines) {
            var self = this;
            this.source = source;
            this.destination = destination;
            this.threshold = threshold;
            this.goal_lines = goal_lines;
            this.metric = metric;
            this.range = { start: moment(range.start), end: moment(range.end)  };
            this.results = results;
            this.chartObject = null;
            this.container = null;
            this.idName = 'daily-' + self.source.id + '-' + self.destination.id + '-' + self.threshold.id + '-' + self.range.start.unix() + '-' + self.range.end.unix();
            this.fileName = 'daily_anatel_' + self.destination.name + '-' + self.metric.plugin + '-' + self.range.start.format("YYYYMMDD_HHmmss") + '-' + self.range.end.format("YYYYMMDD_HHmmss");
            this.params = function () {
                return jQuery.param({
                    'source': self.source.id,
                    'destination': self.destination.id,
                    'metric': self.metric.id,
                    'threshold': self.threshold.id,
                    'from': self.range.start.format("YYYY-MM-DD HH:mm:ss Z"),
                    'to': self.range.end.format("YYYY-MM-DD HH:mm:ss Z")
                })
            };

            if (this.threshold.name == "SCM5/SMP11") {

                var keep_value = {};

                this.goal_dataset = function (direction, value) {
                    direction = typeof direction !== 'undefined' ? direction : 'download';
//TODO: tornar valor da meta coerente
                    return [
                        {x: moment(self.range.start), y: 60},
                        {x: moment(self.range.end), y: 60}
                    ];
                }

                this.dataset = function (direction) {
                    direction = typeof direction !== 'undefined' ? direction : 'dsavg';
                    var retorno = [];
                    ndirection = direction == 'sdavg' ? 'download' : 'upload';
                    jQuery.each(self.results, function (index, result) {
                        //console.log(ndirection, keep_value);
                        var plano = keep_value[ndirection] * 100 / 60;
                        //console.log(keep_value[ndirection], plano);
                        result[direction] = (result[direction] / plano) * 100;
                        retorno.push({x: moment(result.x).toDate(), y: result[direction], extra: result.extra})
                    });

                    return retorno;
                };


                this.series = function () {
                    var directions = [
                        {name: 'dsavg', title: 'Upload'},
                        {name: 'sdavg', title: 'Download'}
                    ];

                    var retorno = [];

                    jQuery.each(goal_lines, function (direction, value) {
                        keep_value[direction] = value;
                        retorno.push({name: 'Meta Anatel ' + direction, data: self.goal_dataset(direction, value), dashStyle: 'shortdot'});
                    });

                    jQuery.each(directions, function (idx, direction) {
                        retorno.push({name: direction.title, data: self.dataset(direction.name, keep_value)});
                    });

                    return retorno;
                };


            }
            else {
                this.dataset = function (direction) {
                    direction = typeof direction !== 'undefined' ? direction : 'dsavg';
                    var retorno = [];
                    jQuery.each(self.results, function (index, result) {
                        retorno.push({x: moment(result.x).toDate(), y: result[direction], extra: result.extra})
                    });

                    return retorno;
                };

                this.goal_dataset = function (direction, value) {
                    direction = typeof direction !== 'undefined' ? direction : 'download';
                    //console.log(value);
                    return [
                        {x: moment(self.range.start), y: value},
                        {x: moment(self.range.end), y: value}
                    ];
                }

                this.series = function () {
                    var directions = [
                        {name: 'dsavg', title: 'Upload'},
                        {name: 'sdavg', title: 'Download'}
                    ];
                    switch (self.metric.plugin) {
                        case 'rtt':
                            directions = [
                                {name: 'y', title: 'Round Trip Time'}
                            ];
                            break;
                        case 'loss':
                            directions = [
                                {name: 'y', title: 'Perda'}
                            ];
                            break;
                        case 'availability':
                            directions = [
                                {name: 'y', title: 'Disponibilidade'}
                            ];
                            break;

                    }

                    var retorno = [];

                    jQuery.each(directions, function (idx, direction) {
                        retorno.push({name: direction.title, data: self.dataset(direction.name)});
                    });
                    jQuery.each(goal_lines, function (direction, value) {
                        retorno.push({name: 'Meta Anatel ' + direction, data: self.goal_dataset(direction, value), dashStyle: 'shortdot'});

                    });
                    return retorno;
                };


            }
            this.draw = function () {
                //cria o container
                if (jQuery("#box-" + self.idName).is(':empty')) {
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<div class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</div>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_diario_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_diario_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                } else {
                    $("#box-" + self.idName).remove();
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<div class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</div>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_diario_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_diario_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                }
                //desenha
                self.chartObject = new Highcharts.Chart({
                    chart: {
                        renderTo: 'chart-' + self.idName,
                        type: 'spline',
                        zoomType: 'x'
                    },
                    title: {
                        text: 'Gráfico de Indicadores do Anatel: ' + self.threshold.name + ' (' + self.threshold.description + ')'
                    },
                    subtitle: {
                        text: 'Origem: ' + self.source.name + ' | Destino: ' + self.destination.name + ' | Data: ' + self.range.start.format('YYYY-MM-DD HH:mm:ss Z') + ' à ' + self.range.end.format('YYYY-MM-DD HH:mm:ss Z')
                    },
                    xAxis: {
                        type: 'datetime',
                        min: self.range.start.valueOf(),
                        max: self.range.end.valueOf()
                    },
                    yAxis: {
                        labels: {
                            formatter: function () {
                                var s = "";
                                var max = this.axis.getExtremes().max;
                                //    console.log(this,max, max % 1000);
                                if (self.threshold.name == "SCM6" || self.threshold.name == "SCM7") {

                                    if (max < 1) {
                                        s = this.value * 1000 + ' ms';
                                    } else {
                                        s = this.value + ' s';
                                    }
                                } else if (self.threshold.name == "SCM9") {
                                    s = this.value * 100 + ' %';
                                } else if (self.threshold.name == "SCM8") {
                                    s = this.value + ' %';
                                } else if (self.threshold.name == "SCM5/SMP11") {
                                    s = this.value + ' %';
                                } else if (self.threshold.name == "SCM4/SMP10") {
                                    if (max > 1000000000) {
                                        s = this.value / 1000000000 + ' Gbps';
                                    } else if (max > 1000000) {
                                        s = this.value / 1000000 + ' Mbps';
                                    } else if (max > 1000) {
                                        s = this.value / 1000 + ' kbps'
                                    } else {
                                        s = this.value + ' bps';
                                    }
                                } else {
                                    s = this.value;
                                }
                                return s;
                            }
                        },
                        title: {
                            text: self.metric.name.toUpperCase()
                        },
                        min: 0
                    },
                    tooltip: {
                        formatter: function () {
                            if (self.threshold.name == "SCM9") {
                                return '<strong>' + this.series.name + ': ' + conversion.stringFromMetric(self.metric.plugin, 100 * this.y) + '</strong><br/><em>' +
                                        moment(this.x).format('YYYY-MM-DD HH:mm:ss Z') + '</em><br />';
                            } else if (self.threshold.name == "SCM5/SMP11") {
                                return '<strong>' + this.series.name + ': ' + this.y + ' %</strong><br/><em>' +
                                        moment(this.x).format('YYYY-MM-DD HH:mm:ss Z') + '</em><br />';

                            } else {
                                return '<strong>' + this.series.name + ': ' + conversion.stringFromMetric(self.metric.plugin, this.y) + '</strong><br/><em>' +
                                        moment(this.x).format('YYYY-MM-DD HH:mm:ss Z') + '</em><br />';
                            }
                        }
                    },
                    series: self.series(),
                    exporting: {
                        url: 'http://200.220.254.22/batik/'
                    }
                });
            };
        }

        function EAQComplianceGraph(source, destination, threshold, metric, range, results) {
            var self = this;
            this.source = source;
            this.destination = destination;
            this.threshold = threshold;
            this.metric = metric;
            this.range = { start: moment(range.start), end: moment(range.end)  };
            this.results = results;
            this.chartObject = null;
            this.container = null;
            this.idName = 'monthly-' + self.source.id + '-' + self.destination.id + '-' + self.threshold.id + '-' + self.range.start.unix() + '-' + self.range.end.unix();
            this.fileName = 'monthly_anatel_' + self.destination.name + '-' + self.metric.plugin + '-' + self.range.start.format("YYYYMMDD_HHmmss") + '-' + self.range.end.format("YYYYMMDD_HHmmss");
            this.params = function () {
                return jQuery.param({
                    'source': self.source.id,
                    'destination': self.destination.id,
                    'metric': self.metric.id,
                    'threshold': self.threshold.id,
                    'from': self.range.start.format("YYYY-MM-DD HH:mm:ss Z"),
                    'to': self.range.end.format("YYYY-MM-DD HH:mm:ss Z")
                })
            };

            this.dataset = function (direction) {
                direction = typeof direction !== 'undefined' ? direction : 'download';
                var retorno = [];
                jQuery.each(self.results, function (index, result) {
                    retorno.push({x: moment(result.x).toDate(), y: result[direction], extra: result.extra})
                });
                return retorno;
            };

            this.goal_dataset = function (value) {
                return [
                    {x: moment(self.range.start), y: value},
                    {x: moment(self.range.end), y: value}
                ];
            }


            this.series = function () {
//            if(/^throughput/.test(self.metric.plugin))
//                var directions = [{name:'upload',title:'Valor alcançado upload'},{name:'download',title:'Valor alcançado download'}];
                if (/^throughput/.test(self.metric.plugin))
                    if (self.threshold.name == "SCM4/SMP10")
                        var directions = [
                            {name: 'download', title: 'Valor alcançado'}
                        ];
                    else
                        var directions = [
                            {name: 'upload', title: 'Valor alcançado upload'},
                            {name: 'download', title: 'Valor alcançado download'}
                        ];


                else
                    var directions = [
                        {name: 'y', title: 'Valor alcançado'}
                    ];
                var retorno = [];
                jQuery.each(directions, function (idx, direction) {
                    retorno.push({name: direction.title, data: self.dataset(direction.name)});
                });

                retorno.push({name: 'Meta Anatel', data: self.goal_dataset(threshold.compliance_level), dashStyle: 'shortdot'});
                return retorno;
            };

            this.draw = function () {
                //cria o container
                if (jQuery("#box-" + self.idName).is(':empty')) {
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<div class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</div>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_mensal_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_mensal_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                } else {
                    $("#box-" + self.idName).remove();
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<div class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</div>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_mensal_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_mensal_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                }
                //desenha
                self.chartObject = new Highcharts.Chart({
                    chart: {
                        renderTo: 'chart-' + self.idName,
                        type: 'spline',
                        zoomType: 'x'
                    },
                    title: {
                        text: 'Gráfico Consolidação Mensal Anatel/EAQ: ' + self.threshold.name + ' (' + self.threshold.description + ')'
                    },
                    subtitle: {
                        text: 'Origem: ' + self.source.name + ' | Destino: ' + self.destination.name + ' | Data: ' + self.range.start.format('YYYY-MM-DD HH:mm:ss Z') + ' à ' + self.range.end.format('YYYY-MM-DD HH:mm:ss Z')
                    },
                    xAxis: {
                        type: 'datetime',
                        min: self.range.start.valueOf(),
                        max: self.range.end.valueOf()
                    },
                    yAxis: {
                        labels: {
                            formatter: function () {
                                var s = "";
                                s = this.value * 100 + ' %';
                                return s;
                            }
                        },
                        title: {
                            text: self.metric.name.toUpperCase()
                        },
                        min: 0
                    },
                    tooltip: {
                        formatter: function () {
                            return '<strong>' + this.series.name + ': ' + (this.y * 100).toFixed(2) + '%</strong><br/><em>' +
                                    moment(this.x).format('YYYY-MM-DD HH:mm:ss Z') + '</em><br />';
                        }
                    },
                    series: self.series(),
                    exporting: {
                        url: 'http://200.220.254.22/batik/'
                    }
                });
            };
        }

        function Graph(source, destination, metric, range, results) {
            var self = this;
            this.source = source;
            this.destination = destination;
            this.metric = metric;
            this.range = { start: moment(range.start), end: moment(range.end)  };
            this.results = results;
            this.chartObject = null;
            this.container = null;
            this.idName = self.source.id + '-' + self.destination.id + '-' + self.metric.id + '-' + self.range.start.unix() + '-' + self.range.end.unix();
            this.fileName = self.destination.name + '-' + self.metric.plugin + '-' + self.range.start.format("YYYYMMDD_HHmmss") + '-' + self.range.end.format("YYYYMMDD_HHmmss");
            this.params = function () {
                return jQuery.param({
                    'source': self.source.id,
                    'destination': self.destination.id,
                    'metric': self.metric.id,
                    'from': self.range.start.format("YYYY-MM-DD HH:mm:ss Z"),
                    'to': self.range.end.format("YYYY-MM-DD HH:mm:ss Z")
                })
            };

            this.dataset = function (direction) {
                direction = typeof direction !== 'undefined' ? direction : 'dsavg';
                var retorno = [];
                jQuery.each(self.results, function (index, result) {
                    retorno.push({x: new Date(Date.parse(result.x)), y: result[direction], extra: result.extra});
                    //retorno.push([Date.parse(result.x), result[direction]]);
                });
                return retorno;
            };

            this.series = function () {
                if (self.metric.plugin != 'rtt')
                    var directions = [
                        {name: 'dsavg', title: 'Upload (avg)', visible: true},
                        {name: 'sdavg', title: 'Download (avg)', visible: true},
                        {name: 'dsmin', title: 'Upload (min)', visible: false},
                        {name: 'dsmax', title: 'Upload (max)', visible: false},
                        {name: 'sdmin', title: 'Download (min)', visible: false},
                        {name: 'sdmax', title: 'Download (max)', visible: false}
                    ];
                else
                    var directions = [
                        {name: 'dsavg', title: 'Round-Trip Time (avg)', visible: true},
                        {name: 'dsmin', title: 'Round-Trip Time (min)', visible: false},
                        {name: 'dsmax', title: 'Round-Trip Time (max)', visible: false}
                    ];
                var retorno = [];
                jQuery.each(directions, function (idx, direction) {
                    retorno.push({name: direction.title, data: self.dataset(direction.name), visible: direction.visible});
                });
                //console.log(retorno);
                return retorno;
            };

            this.draw = function () {
                //cria o container
                if (jQuery("box-" + self.idName).is(':empty')) {
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<div class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</div>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_bruto_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_bruto_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                } else {
                    $("#box-" + self.idName).remove();
                    jQuery('#graphs-area').prepend('<div id=\"box-' + self.idName + '\" class="row-fluid"><div   class=\"span12\"><div id=\"chart-' + self.idName + '\" style="height:300px;"></div></div></div>');
                    jQuery("#box-" + self.idName).append('<a class="btn btn-danger" style="float:right; margin-bottom: 20px" onclick="$(\'#chart-' + self.idName + '\').remove(); $(this).remove();$(\'#export-' + self.idName + '\').remove();$(\'#exportxls-' + self.idName + '\').remove()">Remover</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"export-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_csv_bruto_url '' %>' + self.fileName + '.csv?' + this.params() + '">Exportar CSV</a>');
                    jQuery("#box-" + self.idName).append('<a id=\"exportxls-' + self.idName + '\"  class="btn btn-success" style="float:right; margin-right: 5px ;margin-bottom: 20px" href="<%= reports_xls_bruto_url '' %>' + self.fileName + '.xls?' + this.params() + '">Exportar XLS</a>');

                }
                //desenha
                self.chartObject = new Highcharts.Chart({
                    chart: {
                        renderTo: 'chart-' + self.idName,
                        type: 'spline',
                        zoomType: 'x'
                    },
                    title: {
                        text: 'Dados de Medições do NetMetric: ' + self.metric.name
                    },
                    subtitle: {
                        text: 'Origem: ' + self.source.name + ' | Destino: ' + self.destination.name + ' | Data: ' + self.range.start.format('YYYY-MM-DD HH:mm:ss Z') + ' à ' + self.range.end.format('YYYY-MM-DD HH:mm:ss Z')
                    },
                    xAxis: {
                        type: 'datetime',
                        min: self.range.start.valueOf(),
                        max: self.range.end.valueOf()
                    },
                    yAxis: {
                        title: {
                            text: self.metric.name.toUpperCase()
                        },
                        min: 0
                    },
                    tooltip: {
                        formatter: function () {
                            var extras = '';
                            objLen = $.map(this.point.extra,function (n, i) {
                                return i;
                            }).length;
                            if (objLen > 1) {
                                var kpi = this.point.extra;
                                extras += '<b>LAC: </b>' + kpi.lac + '<br />' + '<b>CELLID: </b>' + kpi.cell_id + '<br />';
                                extras += '<b>Marca: </b>' + kpi.brand + '<br />' + '<b>Modelo: </b>' + kpi.model + '<br />';
                                extras += '<b>Tec. Conex.: </b>' + kpi.conn_tech + '<br />' + '<b>Sinal: </b>' + kpi.signal + 'dB<br />';
                                extras += '<b>Atraso DNS: </b>' + kpi.dns_latency + 'ms<br />';
                            } else if (this.point.extra.uuid) {
                                extras += 'Clique para obter os KPIs';
                            } else {
                                extras += 'Informações KPI não disponíveis para este ponto.';
                            }
                            return '<strong>' + this.series.name + ': ' + conversion.stringFromMetric(self.metric.plugin, this.y) + '</strong><br/><em>' +
                                    moment(this.x).format('YYYY-MM-DD HH:mm:ss Z') + '</em><br />' + extras;
                        }
                    },
                    plotOptions: {
                        series: {
                            cursor: 'pointer',
                            point: {
                                events: {
                                    click: function (evt) {
                                        jQuery.ajax({
                                            url: "<%=show_kpi_url%>",
                                            type: 'post',
                                            dataType: 'json',
                                            data: {
                                                uuid: evt.currentTarget.extra.uuid
                                            },
                                            success: function (data) {
                                                evt.currentTarget.extra = data;
                                                var wtemp = self.chartObject.chartWidth;
                                                var htemp = self.chartObject.chartHeight;
                                                self.chartObject.setSize(wtemp - 10, htemp - 10, false);
                                                self.chartObject.setSize(wtemp, htemp, false);
                                            },
                                            error: function (status, msg, error) {
                                                //graphReport.objects[metric].tooltip.refresh([evt.currentTarget]);
                                            },
                                            headers: {
                                                'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    },
                    series: self.series(),
                    exporting: {
                        url: 'http://200.220.254.22/batik/'
                    }
                });
            };

        }

    /*    $('#nav').affix({
            offset:{
                top: 50

            }
        });

        $('#accordion_forms').affix({
            offset:{
                top: 50
            }
        });

        /* function exportCSV(graphIdName){
         var graph = graphs[graphIdName];
         alert(graph);
         $.ajax({
         type: 'POST',
         headers: {
         'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
         },
         url: "
        <%= reports_csv_bruto_url '' %>"+graph.destination.name+'-'+graph.metric.plugin+'-'+graph.range.start.format("YYYYMMDD_HHmmss")+'-'+graph.range.end.format("YYYYMMDD_HHmmss")+'.csv',
         data: {
         'source': graph.source.id,
         'destination': graph.destination.id,
         'metric': graph.metric.id,
         'from': graph.range.start.format("YYYY-MM-DD HH:mm:ss Z"),
         'to': graph.range.end.format("YYYY-MM-DD HH:mm:ss Z")
         },
         dataType: 'text'
         });


         }   */

    });
</script>


